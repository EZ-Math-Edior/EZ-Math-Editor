{"version":3,"sources":["TextField.js","HideableText.js","DraggableField.js","App.js","reportWebVitals.js","index.js"],"names":["TextField","React","Component","contenteditable","id","DraggableField","props","onLock","setState","draggable","scalable","onFree","lockReverse","state","locked","console","log","editable","disableDragging","this","enableResizing","contentEditable","App","sayHello","alert","lockTextBox","lockElement","current","generatePDF","jsPDF","html","document","querySelector","callback","pdf","save","createRef","className","ref","class","onClick","type","PureComponent","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"qOAEqBA,GCAqBC,IAAMC,U,4JDC/C,WACC,OACA,qBAAKC,gBAAgB,OAAOC,GAAK,YAAjC,sD,GAHqCH,IAAMC,Y,QEAxBG,E,kDAWjB,WAAYC,GAAO,IAAD,8BACd,cAAMA,IAeVC,OAAS,WACL,EAAKC,SAAS,CACVC,WAAY,EACZC,UAAW,KAnBD,EAuBlBC,OAAS,WACL,EAAKH,SAAS,CACVC,WAAY,EACZC,UAAW,KA1BD,EA+BlBE,YAAc,WACP,EAAKC,MAAMC,QACV,EAAKH,SACL,EAAKH,SAAS,CACVM,QAAS,IAEbC,QAAQC,IAAI,WAEZ,EAAKT,SACL,EAAKC,SAAS,CACVM,QAAS,IAEbC,QAAQC,IAAI,YAxChB,EAAKH,MAAQ,CACTJ,WAAY,EACZC,UAAW,EACXO,UAAW,EACXH,QAAQ,GAPE,E,0CAqDlB,WACI,OACI,cAAC,IAAD,CACGI,iBAAoBC,KAAKN,MAAMJ,UAC/BW,eAAkBD,KAAKN,MAAMH,SAFhC,SAMI,qBACIW,gBAAkBF,KAAKN,MAAMI,SAC7Bb,GAAK,YAFT,uD,GAxE4BF,a,QCsE7BoB,E,kDApDd,WAAYhB,GAAO,IAAD,8BACjB,cAAMA,IAMPiB,SAAW,WAGVC,MAAM,gBAVW,EAalBC,YAAc,WACb,EAAKC,YAAYC,QAAQf,eAdR,EAkBlBgB,YAAc,WAEH,IAAIC,IAAM,IAAK,KAAM,MAC3BC,KAAKC,SAASC,cAAc,WAAY,CAC3CC,SAAU,SAASC,GAClBA,EAAIC,KAAK,mBArBX,EAAKT,YAAczB,IAAMmC,YAEzB,EAAKvB,MAAQ,GAJI,E,0CA6BlB,WACC,OACC,qBAAKwB,UAAU,MAAf,SACC,yBAAQA,UAAU,aAAlB,UACC,uEAGA,sBAAKjC,GAAI,SAAT,cACC,4BAAG,cAAC,EAAD,MACH,cAAC,EAAD,CAAgBkC,IAAKnB,KAAKO,cAF3B,OAIA,sBAAKa,MAAM,YAAX,UACC,wBAAQC,QAASrB,KAAKI,SAAtB,kBACA,wBAAQiB,QAASrB,KAAKM,YAAtB,wBACA,0CACA,wBAAQe,QAASrB,KAAKS,YAAaa,KAAK,UAAxC,sC,GA7CYxC,IAAMyC,eCPTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFvB,SAASwB,eAAe,SAM1BZ,M","file":"static/js/main.2aa1a52d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default class TextField extends React.Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t<div contenteditable=\"true\" id = \"textField\">\t\r\n\t\t\tThis text can be edited by the user.\r\n\t\t</div>\r\n\t\t);\r\n\t}\r\n}","import React from 'react';\r\n\r\nexport default class HideableText extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isHidden: false,\r\n    }\r\n  }\r\n\r\n  toggleIsHidden() {\r\n    this.setState((currentState) => ({\r\n      isHidden: !currentState.isHidden,\r\n    }));\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <button onClick={() => this.toggleIsHidden()}> Text functions</button>\r\n        {!this.state.isHidden && this.props.text}\r\n      </div>\r\n    );\r\n  }\r\n\r\n}","import React, { Component } from 'react'\r\nimport { Rnd } from 'react-rnd'\r\nexport default class DraggableField extends Component {\r\n   \r\n    //ref to:\r\n    //https://github.com/bokuweb/react-rnd\r\n    //this ver might have limitations regarding our specific needs- but can be used as a mockup for now\r\n    \r\n    //these are also useful but idk how to combine them together\r\n    //https://github.com/react-grid-layout/react-resizable\r\n    //https://github.com/react-grid-layout/react-draggable\r\n\r\n\r\n    constructor(props){\r\n        super(props)\r\n        //ex. what should a text box do given particular modes? when should it be editable etc.\r\n        this.state = {\r\n            draggable : true,\r\n            scalable : true, \r\n            editable : true,\r\n            locked: false\r\n           \r\n        }\r\n\r\n        \r\n    }\r\n   \r\n\r\n    // these could technically be a single function but why not be explicit\r\n    onLock = () => {\r\n        this.setState({\r\n            draggable : false, \r\n            scalable : false\r\n        })\r\n    };\r\n\r\n    onFree = () => {\r\n        this.setState({\r\n            draggable : true, \r\n            scalable : true\r\n        })\r\n    };\r\n\r\n    //master function that flips it - just for demoing\r\n    lockReverse = () => {\r\n        if(this.state.locked){\r\n            this.onFree();\r\n            this.setState({\r\n                locked : false\r\n            })\r\n            console.log(\"freed\");\r\n        } else {\r\n            this.onLock();\r\n            this.setState({\r\n                locked : true\r\n            })\r\n            console.log(\"locked\");\r\n\r\n        }\r\n\r\n        \r\n\r\n        \r\n    };\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Rnd\r\n               disableDragging = {!this.state.draggable} //props can change at runtime\r\n               enableResizing = {this.state.scalable}\r\n                // cancel = \".cancel\"\r\n            >\r\n                {/* todo: alternative to just some editable text?- may want to find a package/make a custom thing idk */}\r\n                <div \r\n                    contentEditable= {this.state.editable} \r\n                    id = \"textField\"\r\n                >\t\r\n                    This text can be dragged and edited\r\n                </div>\r\n             \r\n            </Rnd>\r\n        )\r\n    }\r\n}\r\n","import './App.css';\r\nimport React from 'react';\r\nimport HideableText from './HideableText';\r\nimport TextField from './TextField'\r\nimport DraggableField from './DraggableField';\r\nimport jsPDF from 'jspdf';\r\n/****************************************\r\n* TODO:\r\n*\tStop editable text box from infinitely resizing\r\n*\t// Add text enhancement options...? (bold, italics, color, etc.)\r\n*\tUI design (where to put text box, how big is its max, default size, etc.)\r\n*\thow to handle math symbols, equations, etc.\r\n*\ttext alignment justification\r\n*\tbuttons/dropdown of options to do the above things\r\n*\tFor editable text field to show up the <div> </div> must be nested in <header> </header>\r\n*\r\n* change state of child from parent (aka app) https://www.freecodecamp.org/news/react-changing-state-of-child-component-from-parent-8ab547436271/\r\n****************************************/\r\n\r\nclass App extends React.PureComponent{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.lockElement = React.createRef(); //associates a jsx element with the component itself i think?\r\n\t\t\t\t\t\t\t\t\t\t\t//i.e. we can access a different component's member functions\r\n\t\tthis.state = {}\r\n\t}\r\n\r\n\tsayHello = () => {\r\n\t\t/*var textField = document.getElementById(\"editor\").addEventListener(\"input\", function() {\r\n\t\t})*/\r\n\t\talert(\"in button 1\");\r\n\t}\r\n\r\n\tlockTextBox = () => {\r\n\t\tthis.lockElement.current.lockReverse();\r\n\r\n\t};\r\n\t// generate pdf function\r\n\tgeneratePDF = () => {\r\n\t\t// new doc variable\r\n\t\tvar doc = new jsPDF('p', 'pt', 'a4');\r\n\t\tdoc.html(document.querySelector(\"#editor\"), {\r\n\t\t\tcallback: function(pdf) {\r\n\t\t\t\tpdf.save(\"yourPDF.pdf\");\r\n\t\t\t}\r\n\t\t}\r\n\t);\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"App\">\r\n\t\t\t\t<header className=\"App-header\">\r\n\t\t\t\t\t<h1> {/* Note according to HTML conventions h1 is the most important header */}\r\n\t\t\t\t\tWELCOME TO THE EZ MATH EDITOR!\r\n\t\t\t\t\t</h1>\r\n\t\t\t\t\t<div id =\"editor\"> {/* Note div id and div class are not the same. div id should be unique to each .js file and div class can be reused to apply the same css style */}\r\n\t\t\t\t\t\t<p><TextField></TextField></p>\r\n\t\t\t\t\t\t<DraggableField ref={this.lockElement}/> {/* this is how you associate a jsx element with the createRef in the constructor */}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div class=\"btn-group\">\r\n\t\t\t\t\t\t<button onClick={this.sayHello}>Btn1</button>\r\n\t\t\t\t\t\t<button onClick={this.lockTextBox}>Lock field</button>\r\n\t\t\t\t\t\t<button>Btn3</button>\r\n\t\t\t\t\t\t<button onClick={this.generatePDF} type=\"primary\">get your pdf</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</header>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}